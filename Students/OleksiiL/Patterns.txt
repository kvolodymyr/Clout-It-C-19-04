Порождающие паттерны проектирования:

- Factory Method (Необходимо отправить уведомление. Пользователь не хочет вникать какие объекты(а они будут разные) будут создаваться для различных видов  уведомлений)
- Abstract Factory (Например локализация классов приложения(хотя так никто и не делает), группы классов связанные между собой языком)
- Builder (Публикация на странице. Может быть просто текст, а можно добавить картинку и т.д.)
- Prototype (Интерфейс ICloneable применений - куча. Как минимум, если этого не сделать приватные поля и свойства - не получится скопировать)
- Singleton (Создание объекта для легковеса, например объект компьютерной игры - пуля/капля)

Структурные паттерны проектирования:

- Adapter (Если приложение рассчитано под работу с одними объектами/интерфейсами/файлами, но нам нужно использовать его со схожими объектами. Например с помощью адаптера мы можем работать с XML как с JSON)
- Bridge (Разделить сложный объект(авто) между простыми объектами/интерфейсами. Например объект физической модели имеющий вес, размер и т.д.(Iobject), и объект имеющий скорость(Imoveable) и эти подклассы и будут формировать авто. И для работы с различными задачами, будем использовать различные объекты)
- Composite (Работа с элементами web страницы, как с деревом)
- Decorator (В соц сетях есть объект публикация, и в зависимости от того, что хочет опубликовать пользователь стандартный класс публикации может получить обёртку с видео/музыкой)
- Facade (Библиотека, выполняющая сложную обработку фото, с которой можно общаться только через один два публичных метода)
- Flyweight (Все пули/капли в компьютерной игре - копии экземпляра одного объекта)
- Proxy (Для юнит тестирования. Нам проще подсунуть класс-заместитель чем тестировать множество "юнитов" одновременно)

Поведенческие паттерны проектирования:

- Chain of responsibility (Обработка нажатия на кнопку в Windows Forms приложении)
- Action (В приложении, нажатие на кнопку, не затрагивает логику приложения напрямую, но специальный механизм взаимодействия доставит ваше сообщение к той самой логике приложения. Этот доставщик и есть реализация паттерна Action)
- Iterator (Класс реализующий интерфейс IEnumerator и сл-но метод MoveNext(), нужен нам для удобного прохода по элементам коллекции)
- Controller,­Mediator (Есть множество объектов, чтобы наладить взаимодействие между ними обычно используется некий менеджер, это и есть паттерн Controller)
- Memento (в текстовом/графическом редакторе вернутся на предыдущее состояние файла)
- Observer (Подписчик на событие)
- State (пользователь / авторизованный пользователь / администратор на некотором веб-сайте)
- Strategy (В зависимости от объема данных запускать тот или иной алгоритм(например, сортировки))
- Template Method (Некий программный инструмент, позволяющий тестировать, проводить контроль качества кода, выполнять сборку, генерировать отчёты сборки, а также развёртывать приложение)
- Visitor (Я не знаю где применять этот паттерн. Как я понял, это какое-то "мягкое" внедрение изменений, которые не отразятся на всём остальном коде(не начнут изменять другие объекты))
